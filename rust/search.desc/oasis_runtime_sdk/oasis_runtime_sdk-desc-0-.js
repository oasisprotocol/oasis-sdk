searchState.loadedDescShard("oasis_runtime_sdk", 0, "Oasis runtime SDK.\nDerives the <code>Error</code> trait on an enum.\nDerives the <code>Event</code> trait on an enum.\nDerives the <code>EvmError</code> trait on an enum.\nDerives the <code>EvmEvent</code> trait on a struct.\nA protocol or runtime version.\nHandling of different call formats.\nConfiguration types.\nExecution context.\nCryptography.\nTransaction dispatcher.\nExposed EnclaveRPC methods.\nError types for runtimes.\nEvent types for runtimes.\nA helper attribute for <code>#[sdk_derive(...)]</code>. It doesn’t do …\nA helper attribute for <code>#[sdk_derive(...)]</code>. It doesn’t do …\nReturns the argument unchanged.\nA helper attribute for <code>#[sdk_derive(...)]</code>. It doesn’t do …\nHistoric state access.\nCalls <code>U::from(self)</code>.\nChecks if two versions are compatible.\nKeymanager interface.\nA helper attribute for <code>#[sdk_derive(...)]</code>. It doesn’t do …\nRuntime modules.\nRuntime modules included with the SDK.\nCreates a new version with given major, minor, and patch …\nRuntime.\nTypes related to schedule control.\nDerives traits from a non-trait <code>impl</code> block (rather than …\nTransaction sender metadata.\nStorage.\nSubcall dispatch.\nModule which contains utilities useful for testing and …\nTypes defined by the SDK.\nConstructs an <code>oasis_sdk::core::common::version::Version</code> …\nAdditional metadata required by the result encoding …\nDecode call arguments.\nDecode call arguments.\nEncode call results.\nEncode call results.\nEncrypt a call result using the X25519-Deoxys-II …\nReturns the argument unchanged.\nDerive the key pair ID for the call data encryption key …\nCalls <code>U::from(self)</code>.\nTransaction index within the batch.\nCaller’s ephemeral public key used for X25519.\nSecret key.\nRuntime schedule control configuration.\nSize of each extra batch that the runtime should fetch.\nConstruct a default schedule control configuration.\nReturns the argument unchanged.\nSize of the initial batch that the node should provide to …\nCalls <code>U::from(self)</code>.\nMaximum number of transactions that can go in a batch.\nMinimum amount of gas that needs to be remaining in a …\nRuntime SDK context.\nRuntime that the context is being invoked in.\nDispatch context for the whole batch.\nClone this context.\nConsensus state.\nCurrent epoch.\nReturns the argument unchanged.\nReturns a logger.\nHistorical state.\nInformation about the host environment.\nCalls <code>U::from(self)</code>.\nWhether <code>method</code> is an allowed query per policy in the local …\nWhether the context has a key manager available (e.g. the …\nThe key manager, if the runtime is confidential.\nReturns node operator-provided local configuration.\nMaximum number of consensus messages that the runtime can …\nCreate a new dispatch context.\nUNIX timestamp of the current block.\nLast runtime block header.\nRuntime ID.\nResults of executing the last successful runtime round.\nWhether smart contracts should be executed in this context.\nRandom number generator based on root VRF key and Merlin …\nCryptographic signatures.\nA multisig configuration. A set of signers with total “…\nError.\nA set of signatures corresponding to a multisig …\nA <code>SignatureSet</code> owned in a <code>Vec</code>.\nOne of the signers in a multisig configuration.\nChecks that the configuration and signature set are …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe public key of the signer.\nThe signers.\nThe threshold.\nPerforms some sanity checks. This looks at the …\nThe weight of the signer.\nA leaf RNG.\nA root RNG that can be used to derive domain-separated …\nAppend local entropy to the root RNG.\nAppend an observed subcontext to RNG transcript.\nAppend an observed transaction hash to RNG transcript.\nCreate an independent leaf RNG using this RNG as its …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate an invalid root RNG which will fail when any leaf …\nCreate a new root RNG.\nError.\nA memory-backed signer.\nA public key used for signing.\nVariable-length opaque signature.\nA specific combination of signature and hash.\nCommon trait for memory signers.\nReturn a byte representation of this public key.\nDomain separation context helpers.\nEd25519 signatures.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nRecreate signer from a byte serialization.\nReconstruct the signer from its byte representation.\nConstruct a public key from a slice of bytes.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn the key type as string.\nCreate a new signer from the given seed.\nCreate a new memory signer from a seed.\nCreate a new signer for testing purposes.\nReturn the public key counterpart to the signer’s secret …\nPublic key corresponding to the signer.\nCreate a new random signer.\nSecp256k1 signatures.\nSecp256r1 signatures.\nSecp384r1 signatures.\nGenerate a signature over the context and message.\nGenerate a signature with the private key over the context …\nGenerate a signature for the specified message and …\nGenerate a signature over the message.\nGenerate a signature with the private key over the message.\nSr25519 signatures.\nSerialize the signer into bytes.\nReturn a byte representation of the signer.\nVerify a signature.\nVerify a batch of signatures of the same message.\nVerify the signature of a message.\nVerify signature raw using the underlying method, without …\nReturn the globally configured chain domain separation …\nConfigure the global chain domain separation context.\nA memory-backed signer for Ed25519.\nAn Ed25519 public key.\nReturn a byte representation of this public key.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstruct a public key from a slice of bytes.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nVerify a signature.\nVerify signature of a pre-hashed message.\nVerify signature without applying domain separation.\nA memory-backed signer for Secp256k1.\nA Secp256k1 public key (in compressed form).\nReturn a byte representation of this public key.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstruct a public key from a slice of bytes.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDerive an Ethereum-compatible address.\nReturn an alternative byte representation used in deriving …\nVerify a signature.\nVerify signature of a pre-hashed message.\nVerify signature without using any domain separation …\nA memory-backed signer for Secp256r1.\nA Secp256r1 public key (in compressed form).\nReturn a byte representation of this public key.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstruct a public key from a slice of bytes.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nVerify a signature.\nVerify signature of a pre-hashed message.\nVerify signature without using any domain separation …\nA memory-backed signer for Secp384r1.\nA Secp384r1 public key (in compressed form).\nReturn a byte representation of this public key.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstruct a public key from a slice of bytes.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nVerify a signature.\nVerify signature of a pre-hashed message.\nVerify signature without using any domain separation …\nA memory-backed signer for Sr25519.\nA Sr25519 public key.\nReturn a byte representation of this public key.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstruct a public key from a slice of bytes.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nVerify a signature used in Oasis SDK transactions.\nVerify a signature.\nVerify a signature using the given transcript.\nAdditional options for dispatch operations.\nResult of dispatching a transaction.\nThe runtime dispatcher.\nError emitted by the dispatch process. Note that this …\nCall format metadata.\nCheck whether the given transaction is valid.\nDecode a runtime transaction.\nProcess the given runtime query.\nDispatch a runtime transaction in the given context.\nRun the dispatch steps inside a transaction context. This …\nDispatch a runtime transaction in the given context with …\nExecute the given transaction.\nExecute the given transaction, returning unserialized …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nOptionally only allow methods for which the provided …\nPrefetch prefixes for the given transaction.\nTransaction priority.\nRegister EnclaveRPC methods.\nTransaction call result.\nTransaction sender metadata.\nOptionally skip authentication.\nTransaction tags.\nTransaction hash.\nTransaction index within the batch.\nTransaction size.\nName of the <code>query</code> method.\nArguments for the <code>query</code> method.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA runtime error that gets propagated to the caller.\nA serializable error.\nError code uniquely identifying the error.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConsumes self and returns either <code>Ok(err)</code> (where <code>err</code> is a …\nConverts the error into a call result.\nName of the module that emitted the error.\nCreate a new error.\nAn event emitted by the runtime.\nA key-value pair representing an emitted event that will …\nEvent tags with values accumulated by key.\nProvides method for converting event tags into events.\nCode uniquely identifying the event.\nGenerate an EventTag corresponding to the passed event …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConverts an event into an event tag.\nName of the module that emitted the event.\nHistory host errors.\nInterface to the runtime host to fetch historic …\nFetch events emitted during execution of the block at …\nFetch historic consensus state after executing the block …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nKey pair ID domain separation context.\nKey manager interface.\nConvenience wrapper around an existing KeyManagerClient …\nKey manager error.\nA key pair managed by the key manager.\nA 256-bit key pair identifier.\nSigned public key.\nA state encryption key.\nSet of trusted key manager signing keys.\nChecksum of the key manager state.\nChecksum of the key manager state.\nClear local key cache.\nExpiration epoch.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a <code>KeyPair</code> with only the public key.\nGenerate a new random key (for testing).\nDerive a <code>KeyPairId</code> for use with the key manager functions.\nGet or create named ephemeral key pair for given epoch.\nGet or create named key pair.\nGet ephemeral public key for an epoch and a key pair id.\nGet public key for a key pair id.\nInput key pair (pk, sk)\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPublic key.\nSize of this object in bytes.\nCreate a <code>KeyPair</code>.\nCreate a new signed public key.\nKey manager runtime identifier this client is connected …\nKey manager runtime signing key used to sign messages from …\nSign(sk, (key || checksum || runtime id || key pair id || …\nSet of trusted signers.\nState encryption key\nThreshold for determining if enough valid signatures are …\nVerify the signature.\nVerifies that signed data has valid signatures and that …\nA fatal error has occurred and the batch must be aborted.\nAn authentication decision for cases where multiple …\nBlock handler.\nA variant of <code>types::transaction::CallResult</code> but used for …\nAuthentication passed, continue with the next …\nResult of invoking the method handler.\nModule error type.\nModule event type.\nCall has completed with failure.\nFee proxy handler.\nGenesis state type.\nInvariant handler.\nMethod handler.\nMigration handler.\nA runtime module.\nInfo handler.\nModule name.\nCall has completed successfully.\nParameters for a runtime module.\nModule parameters.\nStore key used for storing parameters.\nAuthentication passed, no further authentication handlers …\nTransaction handler.\nModule version.\nPerform any action after dispatching the transaction, in …\nPerform any action after call, within the transaction …\nJudge if a raw transaction is good enough to undergo …\nJudge if an unverified transaction is good enough to …\nAuthenticate a transaction.\nPerform any action after authentication and decoding, …\nPerform any action after authentication, within the …\nPerform any common actions at the start of the block …\nCheck invariants.\nDecode a transaction that was sent with module-controlled …\nA convenience function for dispatching method calls.\nDispatch a call.\nDispatch a message result.\nA convenience function for dispatching queries.\nDispatch a query.\nPerform any common actions at the end of the block (after …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInitialize state from genesis or perform a migration.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks whether the given call is allowed to be called …\nChecks whether the given query is allowed to access …\nChecks whether the given query method is tagged as …\nCheck whether the call result indicates a successful …\nReports info about the module (or modules, if <code>Self</code> is a …\nTransforms <code>DispatchResult&lt;B, R&gt;</code> into <code>Result&lt;R, E&gt;</code>, mapping …\nTransforms <code>DispatchResult&lt;B, R&gt;</code> into <code>Result&lt;R, E&gt;</code>, mapping …\nReturn the module’s parameters.\nAdd storage prefixes to prefetch.\nResolve the proxy payer for the given transaction. If no …\nSet the module’s parameters.\nLists the names of all RPC methods exposed by this module. …\nPerform basic parameter validation.\nMethod access control module.\nAccounts module.\nConsensus module.\nConsensus accounts module.\nCore definitions module.\nRewards module.\nOn-chain coordination for ROFL components.\nModule configuration.\nErrors emitted by the access module.\nTo filter methods by caller address, add them to this …\nThe method access control module.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMethod access control module types.\nA set of addresses that can be used to define access …\nOnly allow method calls from these addresses; for other …\nA specific kind of access control.\nControl a statically configured set of methods, each with a\nA specific kind of method authorization.\nA set of methods that are subject to access control.\nHelper for creating a method authorization type that only …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn a new access control configuration.\nHelper for creating a static access control configuration.\nModule’s address that has the common pool.\nModule’s address that has the fee accumulator.\nInterface that can be called from other modules.\nErrors emitted by the accounts module.\nEvents emitted by the accounts module.\nGas costs.\nGenesis state for the accounts module.\nErrors emitted during rewards parameter validation.\nParameters for the accounts module.\nBurn existing tokens, decreasing the total supply.\nMoves the amount into the per-transaction fee accumulator.\nCheck invariants.\nCheck transaction signer account nonces. Return payer …\nEnsures that the given account has at least the specified …\nFee manager.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nFetch addresses.\nGet allowance for an address and denomination.\nFetch an account’s balance of the given denomination.\nFetch an account’s current balances.\nFetch information about a denomination.\nFetch an account’s current nonce.\nFetch total supplies.\nFetch the total supply for the given denomination.\nIncrements an account’s nonce.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMint new tokens, increasing the total supply.\nSet a user’s allowance for spending tokens for the given …\nSets an account’s balance of the given denomination.\nSets an account’s nonce.\nIndicates that the unused portion of the transaction fee …\nSets the total supply for the given denomination.\nState schema constants.\nTake the flag indicating that the unused portion of the …\nTransfer an amount from one account to the other.\nTransfer an amount from one account to the other without …\nAccount module types.\nUpdate transaction signer account nonces.\nThe per-block fee manager that records what fees have been …\nFee updates to apply to state after <code>commit_tx</code>.\nInformation about fees charged for the current transaction.\nTransaction fee amount.\nCommit the fees accumulated for the current block, …\nCommit the currently open transaction fee by moving the …\nDenomination of the transaction fee.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new per-block fee manager.\nTransaction fee payer address.\nFee payer.\nRecord that a transaction fee has been charged.\nRecord that a portion of the previously charged …\nAmount that should be refunded to fee payer.\nFees charged for the current transaction.\nMap of account addresses to account metadata.\nMap of allowances (per denomination).\nMap of account addresses to map of denominations to …\nMap of total supplies (per denomination).\nAccount metadata.\nBalances in an account.\nArguments for the Addresses query.\nArguments for the Balances query.\nInformation about a denomination.\nArguments for the DenominationInfo query.\nArguments for the Nonce query.\nTransfer call.\nNumber of decimals that the denomination is using.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInterface that can be called from other modules.\nEvents emitted by the consensus module (none so far).\nGas costs.\nGenesis state for the consensus module.\nErrors emitted during rewards parameter validation.\nParameters for the consensus module.\nQuery consensus account info.\nConvert runtime amount to consensus amount, scaling as …\nConvert consensus amount to runtime amount, scaling as …\nReturns consensus token denomination.\nQuery consensus delegation info.\nEnsures transaction signer is consensus compatible.\nEscrow an amount of the runtime account funds.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nDetermine consensus height corresponding to the given …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMinimum amount that is allowed to be delegated. This …\nReclaim an amount of runtime staked shares.\nCost of the internal round_root call.\nRound roots return the round roots for the given runtime …\nTransfer an amount from the runtime account.\nWithdraw an amount into the runtime account.\nKind of root.\nInternal round root call body.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nModule’s address that has the tokens pending delegation.\nModule’s address that has the tokens pending withdrawal.\nInterface that can be called from other modules.\nEvents emitted by the consensus accounts module.\nGas costs.\nGenesis state for the consensus module.\nParameters for the consensus module.\nCheck invariants.\nDelegate from runtime account to consensus staking account.\nCost of getting delegation info through a subcall.\nTransfer from consensus staking account to runtime account.\nWhether delegate functionality should be disabled.\nWhether deposit functionality should be disabled.\nWhether undelegate functionality should be disabled.\nWhether withdraw functionality should be disabled.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCost of converting the number of delegated shares to …\nState schema.\nCost of storing a delegation/undelegation receipt.\nCost of taking a delegation/undelegation receipt.\nConsensus module types.\nStart the undelegation process of the given number of …\nTransfer from runtime account to consensus staking account.\nMap of active delegations.\nReceipts.\nMap of undelegations.\nAn undelegation queue.\nUndelegation metadata.\nAdd delegation for a given (from, to) pair.\nRecord new undelegation and add to undelegation queue.\nReturns the argument unchanged.\nRetrive delegation metadata for all delegations.\nRetrieve all undelegation metadata.\nRetrieve delegation metadata for a given (from, to) pair.\nRetrieve all delegation metadata originating from a given …\nReturn the number of delegated shares for each destination …\nRetrieve all queued undelegations for epochs earlier than …\nRetrieve all undelegation metadata to a given address.\nCalls <code>U::from(self)</code>.\nStore the given receipt.\nSubtract delegation from a given (from, to) pair.\nRemove the given receipt from storage if it exists and …\nRemove an existing undelegation and return it.\nBalance query.\nFull information about a delegation.\nFull information about an undelegation.\nConsensus account query.\nContext for consensus delegate message handler.\nError details from the consensus layer.\nContext for consensus transfer message handler.\nContext for consensus undelegate message handler.\nContext for consensus withdraw message handler.\nDelegate from runtime call.\nInformation about a delegation.\nDelegation query.\nDelegations query.\nDeposit into runtime call. Transfer from consensus staking …\nExtended information about a delegation.\nA receipt.\nKind of receipt.\nKind of shares pool.\nSharesToTokens arguments.\nTake receipt internal runtime call.\nUndelegate into runtime call.\nInformation about an undelegation.\nUndelegations query.\nWithdraw from runtime call. Transfer from an account in …\nTarget account.\nAmount of tokens received.\nUndelegate end epoch.\nEpoch when the undelegation will be complete.\nEpoch when the undelegation will be complete.\nConsensus layer error.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAddress delegating from.\nAddress being undelegated from.\nAddress being undelegated from.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether the receipt kind is valid.\nKind of shares pool.\nUndelegate end receipt.\nReceipt identifier for this undelegation.\nShares received (for delegations).\nNumber of delegated shares to convert into tokens.\nThe amount of owned shares.\nThe amount of owned shares.\nThe amount of owned shares.\nThe amount of undelegated shares.\nThe amount of undelegated shares.\nAddress delegated to.\nAddress delegated to.\nAddress being undelegated to.\nWhether to allow submission of read-only transactions in …\nInterface that can be called from other modules.\nModule configuration.\nModule configuration.\nDefault local estimate gas max search iterations …\nDefault local minimum gas price configuration that is used …\nDynamic min gas price parameters.\nWhether gas used events should be emitted for every …\nEstimated gas amount to be added to failed transaction …\nErrors emitted by the core module.\nEvents emitted by the core module.\nThe gas cost of the internal call to retrieve the current …\nThe gas cost of the internal call to retrieve the current …\nGas costs.\nGenesis state for the accounts module.\nLocal configuration that can be provided by the node …\nMethods which are exempt from minimum gas price …\nUnique module name.\nErrors emitted during core parameter validation.\nParameters for the core module.\nSimulation failure error.\nEnables the dynamic min gas price feature which …\nReturns the configured max iterations in the binary search …\nThe maximum number of iterations of the binary search to …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCheck whether the epoch has changed since last processed …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the failure is “core::Error::OutOfGas”.\nConfigured maximum amount of gas that can be used in a …\nWhen estimating gas in <code>core.EstimateGas</code>, simulate the tx …\nConfigured minimum gas price.\nMinimum gas price to accept.\nRepresents a constant value used to limit the rate at …\nGenerate a proper OutOfGas error, depending on whether the …\nRun a transaction in simulation and return how much gas it …\nReturns the remaining batch-wide gas.\nReturn the remaining tx-wide gas.\nSets the transaction priority to the provided amount.\nSet transaction sender metadata.\nState schema constants.\nTakes and returns the stored transaction priority.\nTakes and returns the stored transaction sender metadata.\nTarget block gas usage indicates the desired block gas …\nAttempt to use gas. If the gas specified would cause …\nAttempt to use gas. If the gas specified would cause …\nReturns the total batch-wide gas used.\nReturn the used tx-wide gas.\nDynamic min gas price.\nLast processed epoch for detecting epoch changes.\nMap of message idx to message handlers for messages …\nRuntime metadata.\nResponse to the call data public key query.\nArguments for the EstimateGas query.\nArguments for the ExecuteReadOnlyTx query.\nResponse to the ExecuteReadOnlyTx query.\nBasic per-module metadata; tracked in core module’s …\nMetadata for an individual module.\nResponse to the RuntimeInfo query.\nKey in the versions map used for the global state version.\nThe address of the caller for which to do estimation. If …\nEpoch of the ephemeral runtime key.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIf the estimate gas query should fail in case of …\nPublic key used for deriving the shared secret for …\nThe unsigned transaction to estimate.\nA set of state versions for all supported modules.\nModule’s address that has the reward pool.\nErrors emitted by the rewards module.\nGenesis state for the rewards module.\nRewards module.\nErrors emitted during rewards parameter validation.\nParameters for the rewards module.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nState schema constants.\nRewards module types.\nMap of epochs to rewards pending distribution.\nRewards for the epoch.\nAction that should be taken for a given address when …\nA reward schedule.\nErrors emitted during reward schedule validation.\nOne of the time periods in the reward schedule.\nReturns an iterator over addresses that should be rewarded.\nCompute the per-entity reward amount for the given epoch …\nForbids any rewards from accumulating.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nIncrement the reward counter associated with the reward.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPerform basic reward schedule validation.\nValue of the reward counter.\nModule’s address that has the application stake pool.\nInterface that can be called from other modules.\nModule configuration.\nMaximum key identifier length for rofl.DeriveKey call.\nMaximum key identifier length for rofl.DeriveKey call.\nErrors emitted by the module.\nEvents emitted by the ROFL module.\nGas cost of rofl.AuthorizedOriginEntity call.\nGas cost of rofl.AuthorizedOriginEntity call.\nGas cost of rofl.AuthorizedOriginNode call.\nGas cost of rofl.AuthorizedOriginNode call.\nGas cost of rofl.Create call.\nGas cost of rofl.Create call.\nGas cost of rofl.DeriveKey call.\nGas cost of rofl.DeriveKey call.\nGas cost of rofl.IsAuthorizedOrigin call.\nGas cost of rofl.IsAuthorizedOrigin call.\nGas cost of rofl.Register call.\nGas cost of rofl.Register call.\nGas cost of rofl.Remove call.\nGas cost of rofl.Remove call.\nGas cost of rofl.StakeThresholds call.\nGas cost of rofl.StakeThresholds call.\nGas cost of rofl.Update call.\nGas cost of rofl.Update call.\nGenesis state for the module.\nMaximum metadata key size.\nMaximum metadata key size.\nMaximum number of metadata key-value pairs.\nMaximum number of metadata key-value pairs.\nMaximum metadata value size.\nMaximum metadata value size.\nErrors emitted during parameter validation.\nParameters for the module.\nKey derivation context.\nSecrets encryption key identifier.\nAmount of stake required for maintaining an application.\nAmount of stake required for maintaining an application.\nWrapper to make development of ROFL components easier.\nROFL application identifier.\nApplication configurations.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet an application’s configuration.\nGet all application configurations.\nGet all registered instances for an application.\nGet the Runtime Attestation Key of the ROFL app instance …\nGet the registration descriptor of the ROFL app instance …\nGet a specific registered instance for an application.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nVerify whether the origin transaction is signed by an …\nROFL component application.\nApplication environment.\nROFL application version.\nApplication instance.\nRuntime client.\nReturn the consensus layer trust root for this runtime; if …\nReturns the argument unchanged.\nFetches custom app instance metadata that is included in …\nHost interface.\nIdentifier of the application (used for registrations).\nRuntime identity.\nAdditional init functionalities performed by ROFL apps …\nEarly application initialization.\nCalls <code>U::from(self)</code>.\nCreate a new unsigned transaction.\nLogic that runs on each runtime block. Only one of these …\nCustom post-registration initialization. It runs before …\nPrelude for ROFL applications.\nMain application processing loop.\nRuntime identifier.\nTransaction signer.\nStart the application.\nUntrusted local runtime configuration defined by the node …\nA runtime client meant for use within runtimes.\nApp-specific key derivation request.\nTransaction submission options.\nRetrieve the nonce for the given account.\nRetrieves application configuration.\nDerive an application-specific key.\nWhether the call data should be encrypted (true by …\nSecurely perform gas estimation.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nRetrieve the gas price in the given denomination.\nKey generation.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nKey identifier.\nKey kind.\nRetrieve the latest known runtime round.\nSign a given transaction, submit it and wait for block …\nSign a given transaction, submit it and wait for block …\nSecurely query the on-chain runtime component.\nKey scope.\nSign a given transaction, submit it and wait for block …\nReturn a store corresponding to the given round.\nOptional timeout when submitting a transaction. Setting …\nWhether to verify the transaction result (true by default).\nRun a closure inside a <code>CurrentState</code> context with store for …\nA thread-safe reference-counting pointer. ‘Arc’ stands …\nContains the error value\nContains the success value\n<code>Result&lt;T, Error&gt;</code>\nConsensus layer trust root.\nA protocol or runtime version.\nReturns a reference to the underlying allocator.\nProvides a raw pointer to the data.\nConverts to <code>Arc&lt;T&gt;</code>.\nConverts to <code>Arc&lt;[T]&gt;</code>.\nKnown consensus chain context.\nMakes a clone of the <code>Arc</code> pointer.\nComparison for two <code>Arc</code>s.\nDecrements the strong reference count on the <code>Arc&lt;T&gt;</code> …\nDecrements the strong reference count on the <code>Arc&lt;T&gt;</code> …\nCreates a new <code>Arc&lt;T&gt;</code>, with the <code>Default</code> value for <code>T</code>.\nCreates an empty str inside an Arc\nCreates an empty CStr inside an Arc\nCreates an empty <code>[T]</code> inside an Arc\nAttempts to downcast the <code>Arc&lt;dyn Any + Send + Sync&gt;</code> to a …\nDowncasts the <code>Arc&lt;dyn Any + Send + Sync&gt;</code> to a concrete …\nCreates a new <code>Weak</code> pointer to this allocation.\nDrops the <code>Arc</code>.\nEquality for two <code>Arc</code>s.\nMove a boxed object to a new, reference-counted allocation.\nAllocates a reference-counted <code>str</code> and copies <code>v</code> into it.\nConverts a <code>Path</code> into an <code>Arc</code> by copying the <code>Path</code> data into …\nCopies the string into a newly allocated Arc&lt;OsStr&gt;.\nConverts a <code>Path</code> into an <code>Arc</code> by copying the <code>Path</code> data into …\nConverts an atomically reference-counted string slice into …\nConverts a <code>PathBuf</code> into an Arc&lt;Path&gt; by moving the <code>PathBuf</code> …\nReturns the argument unchanged.\nCopies the string into a newly allocated Arc&lt;OsStr&gt;.\nConverts a <code>CString</code> into an Arc&lt;CStr&gt; by moving the <code>CString</code> …\nCreates an atomically reference-counted pointer from a …\nConverts a <code>&amp;CStr</code> into a <code>Arc&lt;CStr&gt;</code>, by copying the contents …\nConverts a <code>&amp;mut CStr</code> into a <code>Arc&lt;CStr&gt;</code>, by copying the …\nAllocates a reference-counted slice and moves <code>v</code>’s items …\nConverts a <code>T</code> into an <code>Arc&lt;T&gt;</code>\nConverts a <code>[T; N]</code> into an <code>Arc&lt;[T]&gt;</code>.\nAllocates a reference-counted slice and fills it by …\nAllocates a reference-counted slice and fills it by …\nAllocates a reference-counted <code>str</code> and copies <code>v</code> into it.\nAllocates a reference-counted <code>str</code> and copies <code>v</code> into it.\nConverts an <code>OsString</code> into an Arc&lt;OsStr&gt; by moving the …\nReturns the argument unchanged.\nTakes each element in the <code>Iterator</code> and collects it into an …\nConstructs an <code>Arc&lt;T&gt;</code> from a raw pointer.\nConstructs an <code>Arc&lt;T, A&gt;</code> from a raw pointer.\n‘Greater than or equal to’ comparison for two <code>Arc</code>s.\nReturns a mutable reference into the given <code>Arc</code>, if there …\nReturns a mutable reference into the given <code>Arc</code>, without …\nGreater-than comparison for two <code>Arc</code>s.\nKnown hex-encoded trusted consensus layer header hash.\nKnown trusted height.\nIncrements the strong reference count on the <code>Arc&lt;T&gt;</code> …\nIncrements the strong reference count on the <code>Arc&lt;T&gt;</code> …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts the reference-counted slice into a …\nReturns the inner value, if the <code>Arc</code> has exactly one strong …\nConsumes the <code>Arc</code>, returning the wrapped pointer.\nConsumes the <code>Arc</code>, returning the wrapped pointer and …\n‘Less than or equal to’ comparison for two <code>Arc</code>s.\nLess-than comparison for two <code>Arc</code>s.\nMakes a mutable reference into the given <code>Arc</code>.\nInequality for two <code>Arc</code>s.\nConstructs a new <code>Arc&lt;T&gt;</code>.\nConstructs a new <code>Arc&lt;T&gt;</code> while giving you a <code>Weak&lt;T&gt;</code> to the …\nConstructs a new <code>Arc&lt;T, A&gt;</code> in the given allocator while …\nConstructs a new <code>Arc&lt;T&gt;</code> in the provided allocator.\nConstructs a new <code>Arc</code> with uninitialized contents.\nConstructs a new <code>Arc</code> with uninitialized contents in the …\nConstructs a new atomically reference-counted slice with …\nConstructs a new atomically reference-counted slice with …\nConstructs a new <code>Arc</code> with uninitialized contents, with the …\nConstructs a new <code>Arc</code> with uninitialized contents, with the …\nConstructs a new atomically reference-counted slice with …\nConstructs a new atomically reference-counted slice with …\nPartial comparison for two <code>Arc</code>s.\nConstructs a new <code>Pin&lt;Arc&lt;T&gt;&gt;</code>. If <code>T</code> does not implement <code>Unpin</code>…\nConstructs a new <code>Pin&lt;Arc&lt;T, A&gt;&gt;</code> in the provided allocator. …\nReturns <code>true</code> if the two <code>Arc</code>s point to the same allocation …\nKnown runtime identifier.\nGets the number of strong (<code>Arc</code>) pointers to this …\nConstructs a new <code>Arc&lt;T&gt;</code>, returning an error if allocation …\nConstructs a new <code>Arc&lt;T, A&gt;</code> in the provided allocator, …\nConstructs a new <code>Arc</code> with uninitialized contents, …\nConstructs a new <code>Arc</code> with uninitialized contents, in the …\nConstructs a new <code>Arc</code> with uninitialized contents, with the …\nConstructs a new <code>Arc</code> with uninitialized contents, with the …\nConstructs a new <code>Pin&lt;Arc&lt;T&gt;&gt;</code>, return an error if …\nConstructs a new <code>Pin&lt;Arc&lt;T, A&gt;&gt;</code> in the provided allocator, …\nReturns the inner value, if the <code>Arc</code> has exactly one strong …\nIf we have the only reference to <code>T</code> then unwrap it. …\nGets the number of <code>Weak</code> pointers to this allocation.\nHuman readable part for Bech32-encoded application …\nROFL application identifier.\nError.\nSize of an application identifier in bytes.\nReturns the argument unchanged.\nReturns the argument unchanged.\nTries to create a new identifier from Bech32-encoded …\nTries to create a new identifier from raw bytes.\nCreates a new v0 application identifier from creator/nonce …\nCreates a new v0 application identifier from …\nCreates a new v0 application identifier from a global name.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert the identifier into raw bytes.\nConverts an identifier to Bech32 representation.\nAn allowed endorsement policy.\nAny node can endorse the enclave.\nPer-application ROFL policy.\nCompute node for the current runtime can endorse the …\nEndorsing node pays the gas fees.\nRegistered node from a specific entity can endorse the …\nGas fee payment policy.\nApplication enclave pays the gas fees.\nSpecific node can endorse the enclave.\nObserver node for the current runtime can endorse the …\nThe set of allowed enclave identities.\nThe set of allowed endorsements.\nGas fee payment policy.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMaximum number of future epochs for which one can register.\nQuote policy.\nInformation about an endorsed key.\nRemoves all expired registrations, e.g. those that expire …\nCreate a new key endorsement information for extra key …\nCreate a new key endorsement information for RAK endorsed …\nReturns the argument unchanged.\nRetrieves an application configuration.\nRetrieves all application configurations.\nRetrieves endorser of the given ROFL enclave. In case …\nRetrieves registration of the given ROFL enclave. In case …\nRetrieves all registrations for the given ROFL application.\nCalls <code>U::from(self)</code>.\nIdentifier of node that endorsed the enclave.\nRAK of the enclave that endorsed the key. This is only set …\nRemoves an application configuration.\nRemoves an existing registration of the given ROFL enclave.\nUpdates an application configuration.\nUpdates registration of the given ROFL enclave.\nROFL application configuration.\nApplication instance query.\nApplication-related query.\nCreate new ROFL application call.\nDerive key call.\nResponse from the derive key call.\nEntity scope (e.g. all instances endorsed by nodes from …\nRaw entropy derivation.\nGlobal application scope (e.g. all instances get the same …\nROFL application identifier generation scheme.\nKind of key for derivation.\nScope of key for derivation.\nNode scope (e.g. all instances endorsed by the same node …\nRegister ROFL call.\nROFL registration descriptor.\nRemove an existing ROFL application call.\nStake thresholds for managing ROFL.\nUpdate an existing ROFL application call.\nX25519 key pair.\nApplication administrator address.\nApplication administrator address.\nROFL application identifier.\nROFL application identifier.\nApplication this enclave is registered for.\nROFL application identifier.\nRequired stake for creating new ROFL application.\nEndorsed TEE capability.\nOptional identifier of the endorsing entity.\nEpoch when the ROFL registration expires if not renewed.\nEpoch when the ROFL registration expires if not renewed.\nExtra public keys to endorse (e.g. secp256k1 keys).\nExtra public keys to endorse (e.g. secp256k1 keys).\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nKey generation.\nROFL application identifier.\nROFL application identifier.\nROFL application identifier.\nROFL application identifier.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether this key scope is the global key scope.\nDerived key.\nKey identifier.\nKey kind.\nMetadata (arbitrary key/value pairs).\nMetadata (arbitrary key/value pairs).\nMetadata (arbitrary key/value pairs).\nArbitrary app-specific metadata.\nArbitrary app-specific metadata.\nIdentifier of the endorsing node.\nApplication authentication policy.\nAuthentication policy.\nAuthentication policy.\nRuntime Attestation Key.\nRuntime Attestation Key.\nRuntime Encryption Key.\nIdentifier generation scheme.\nKey scope.\nSecrets (arbitrary encrypted key/value pairs).\nSecrets (arbitrary encrypted key/value pairs).\nSecret encryption public key. The key is used to derive a …\nStaked amount.\nModule that provides the accounts API.\nModule that provides the core API.\nHandler for proxy fee payments.\nSupported modules.\nPrefetch limit. To enable prefetch set it to a non-zero …\nA runtime.\nRuntime schedule control configuration.\nState version.\nRuntime version.\nReturn the consensus layer trust root for this runtime; if …\nGenesis state for the runtime.\nWhether a given call is allowed to be invoked …\nWhether a given query method is allowed to access private …\nWhether a given query method is allowed to be invoked.\nPerform state migrations if required.\nPerform runtime-specific state migration. This method is …\nStart the runtime.\nReturn the trusted signers for this runtime; if <code>None</code>, a …\nSchedule control errors.\nInterface to the runtime host that supports schedule …\nFetch the specified set of transactions from the host’s …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nTransaction sender metadata.\nSender address.\nReturns the argument unchanged.\nUnique identifier of the sender, currently derived from …\nCalls <code>U::from(self)</code>.\nSender nonce contained in runtime state.\nSender nonce contained in the transaction.\nCheck that transactions are valid for local acceptance …\nState attached to the current thread.\nInformation about the execution environment.\nActually execute transactions during block production.\nExecution mode.\nEnvironment modification options.\nCheck that transactions are still valid before scheduling.\nSimulate transaction outcomes (e.g. for gas estimation).\nMutable block state of a runtime.\nA per-state arbitrary value.\nResult of a transaction helper closure.\nDecoded transaction with additional metadata.\nFetches a block state value entry.\nCommit the current state and return to its parent state.\nCommit a previously started transaction.\nDecoded transaction.\nEmit an event.\nEmit a raw event.\nQueue a message to be emitted by the runtime for consensus …\nEmit an unconditional event.\nEmitted messages count returns the number of messages …\nEmitted messages count returns the number of messages …\nMaximum number of messages that can be emitted.\nAttach a new state to the current thread and enter the …\nAttach a new state to the current thread and enter the …\nEnvironment information.\nOrigin environment information.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets a reference to the specified per-state value.\nGets a mutable reference to the specified per-state value.\nWhether the store associated with the state has any …\nTransaction hash.\nHides block values from the current state which will have …\nTransaction index within the batch.\nCreate transaction with metadata for an internally …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether the execution mode is such that only checks should …\nWhether the execution mode is <code>Mode::Execute</code>.\nWhether the current execution environment is part of an …\nWhether the execution mode is <code>Mode::PreSchedule</code>.\nAn active transaction’s read only flag.\nWhether the execution mode is <code>Mode::Simulate</code>.\nWhether there is an active transaction in the current …\nReturns the nesting level of the current state.\nFetches a local state value entry.\nExecution mode.\nCreate options with default values.\nOpen a child state after which self will point to the …\nRetrieves the existing value or inserts and returns the …\nSize (in bytes) of any pending updates in the associated …\nRandom number generator.\nRollback the current state and return to its parent state.\nRollback a previously started transaction.\nSets the context value, returning a mutable reference to …\nTransaction size.\nStart a new transaction by opening a new child state.\nStore associated with the state.\nTakes the context value, if it exists.\nTake all events accumulated in the current state and …\nTake all regular events accumulated in the current state.\nTake all messages accumulated in the current state.\nTake all unconditional events accumulated in the current …\nAn active transaction’s authentication information.\nAn active transaction’s call format.\nAuthenticated address of the caller.\nAuthenticated caller public key if available.\nAn active transaction’s index (order) within the block.\nAn active transaction’s size in bytes.\nRun a closure with the currently active state.\nRun a closure with the environment of the currently active …\nRun a closure with the origin environment of the currently …\nChange the internal flag of the environment.\nChange the execution mode of the environment.\nRequest for local entropy to be mixed into the current RNG.\nRun a closure with the store of the currently active state.\nRun a closure within a state transaction.\nRun a closure within a state transaction, allowing the …\nChange the active transaction of the environment.\nA key-value store that hashes all keys and stores them as …\nType of the inner store.\nA key-value store backed by MKVS.\nA key-value store that supports the commit operation.\nAn overlay store which keeps values locally until …\nA key prefix.\nA key-value store that prefixes all keys with the given …\nA key-value store.\nA key-value store that transparently handles …\nCommit any changes to the underlying store.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nFetch entry with given key.\nFetch entry with given key.\nWhether there are any store updates pending to be …\nUpdate entry with given key to the given value.\nUpdate entry with given key to the given value.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns an iterator over the tree.\nCreate a new hashed store.\nCreate a new overlay store.\nCreate a new prefix store with the given prefix.\nCreate a new typed store.\nSize (in bytes) of any pending updates.\nPopulate the in-memory tree with nodes for keys starting …\nRemove entry with given key.\nRemove entry with given key.\nRollback any changes.\nA key-value store that encrypts all content with DeoxysII.\nErrors emitted by the confidential store.\nSize of the Deoxys-II-256-128 key in bytes.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new confidential store with the given keypair.\nA store for a specific state root that talks to the …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new host store for the given host and root.\nCreate a new host store for the given host and root at the …\nCreate a new MKVS tree for the given host and root.\nCreate a new MKVS tree for the given host and runtime at …\nA validator which allows everything.\nInformation about a subcall to be dispatched.\nResult of dispatching a subcall.\nSubcall validator.\nSubcall body.\nPerform a subcall.\nResult of the subcall.\nAddress of the caller.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGas used by the subcall.\nThe current subcall depth.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMaximum subcall depth.\nMaximum gas amount that can be consumed.\nMethod to call.\nValidate a subcall before it is performed.\nMock key manager implementation.\nModule that contains known test keys.\nMock dispatch context for use in tests.\nKey manager error.\nA key pair managed by the key manager.\nA 256-bit key pair identifier.\nSigned public key.\nA state encryption key.\nSet of trusted key manager signing keys.\nChecksum of the key manager state.\nChecksum of the key manager state.\nExpiration epoch.\nReturns the argument unchanged.\nInput key pair (pk, sk)\nCalls <code>U::from(self)</code>.\nPublic key.\nSign(sk, (key || checksum || runtime id || key pair id || …\nSet of trusted signers.\nState encryption key\nThreshold for determining if enough valid signatures are …\nTest key A .\nTest key B .\nTest key C .\nTest key D .\nTest key E .\nTest key F .\nTest key G .\nTest address A .\nTest public key A .\nTest Ed25519 public key A .\nTest address derivation information A .\nTest address B .\nTest public key B .\nTest Ed25519 public key B .\nTest address derivation information B .\nTest address C .\nTest public key C .\nTest Ed25519 public key C .\nTest address derivation information C .\nTest address D .\nTest public key D .\nTest Secp256k1 public key D .\nTest address derivation information D .\nTest address E .\nTest public key E .\nTest Secp256k1 public key E .\nTest address derivation information E .\nTest address F .\nTest public key F .\nTest Sr25519 public key F .\nTest address derivation information F .\nTest address G .\nTest public key G .\nTest Sr25519 public key G .\nTest address derivation information G .\nOptions that can be used during mock signer calls.\nA mock runtime that only has the core module.\nMock dispatch context factory.\nA mock signer for use during tests.\nDispatch a call to the given method.\nDispatch a call to the given method with the given options.\nCreate a new mock dispatch context.\nCreate a new mock dispatch context.\nCreate an empty MKVS store.\nShould the call be encrypted.\nTransaction fee.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new mock signer using the given nonce and …\nDispatch a query to the given method.\nAddress specification for this signer.\nCreate a new mock transaction.\nCreate an instance with the given local configuration.\nAccount address type.\nTypes related to call formats.\nToken types.\nTransaction types.\nHuman readable part for Bech32-encoded addresses.\nV0 runtime address context.\nV0 runtime address version.\nV0 Ed25519 addres context (shared with consensus layer).\nV0 module address context.\nV0 multisig address context.\nV0 Secp256k1 address context.\nV0 Sr25519 address context.\nV0 address version.\nAn account address.\nEd25519 address derivation compatible with the consensus …\nError.\nSize of an address in bytes.\nEthereum-compatible address derivation from Secp256k1 …\nInformation for signature-based authentication and public …\nSr25519 address derivation.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nTries to create a new address from Bech32-encoded string.\nTries to create a new address from raw bytes.\nCreates a new address from a consensus-layer Ed25519 …\nCreates a new address from an Ethereum-compatible address.\nCreates a new address for a specific module and kind.\nCreates a new address for a specific module and raw kind.\nCreates a new address from a multisig configuration.\nCreates a new runtime address.\nCreates a new address from a public key.\nGenerate a custom Ethereum address with proper domain …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert the address into raw bytes.\nCreates a new address from a context, version and data.\nPublic key of the authentication/address derivation …\nConverts an address to Bech32 representation.\nTry to construct an authentication/address derivation …\nCall data key pair ID domain separation context base.\nA call envelope when using the EncryptedX25519DeoxysII …\nA result envelope when using the EncryptedX25519DeoxysII …\nEncrypted call data.\nEncrypted call data.\nEpoch of the ephemeral runtime key.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nNonce.\nNonce.\nCaller’s ephemeral public key used for X25519.\nResult of a message being processed by the consensus layer.\nHandler name and context to be called after message is …\nResult of a message being processed by the consensus layer …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstructs a new message hook invocation.\nToken amount of given denomination in base units.\nName/type of the token.\nMaximum length of a denomination.\nDenomination in native token.\nToken amount in base units.\nMutable token amount in base units.\nDenomination of the token amount.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRaw representation of a denomination.\nWhether the denomination represents the native token.\nCreates a new token amount of the given denomination.\nCommon information that specifies an address as well as …\nTransaction authentication information.\nA container for data that authenticates a transaction.\nMethod call.\nFormat used for encoding the call (and output) information.\nCall result.\nA caller address.\nEncrypted call data using X25519 for key exchange and …\nError.\nTransaction fee.\nInformation about a fee proxy.\nFor internal child calls (cannot be …\nA non-serializable placeholder value.\nThe latest transaction format version.\nA flag to use module-controlled decoding. The string is an …\nFor <em>multisig</em> authentication.\nFor <em>multisig</em> authentication.\nPlain text call data.\nTransaction signature domain separation context base.\nFor <em>signature</em> authentication.\nFor <em>signature</em> authentication.\nTransaction signer information.\nTransaction.\nTransaction signer.\nAn unverified signed transaction.\nDerives the address.\nDerives the address.\nAmount of base units paid as fee for transaction …\nAppend a new transaction signer information with a …\nAppend a new transaction signer information with a …\nSign the transaction and append the signature.\nAppend a new transaction signer information to the …\nChecks that the address specification and the …\nMethod body.\nDerives the caller address.\nMaximum amount of emitted consensus messages paid for. …\nFee payment information.\nAmount of fee to pay for transaction execution.\nMaximum amount of gas that the transaction can use.\nFinalize the signing process and return the (signed) …\nCall format.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nMaximum amount of gas paid for.\nCalculates gas price from fee amount and gas.\nModule-specific identifier that will handle fee payments …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether this call format is end-to-end encrypted.\nCheck whether the call result indicates a successful …\nMethod name.\nModule that will handle the proxy payment.\nConstruct a new transaction signer for the given …\nCreate a new (unsigned) transaction.\nCreate a new signer info from a multisig configuration and …\nCreate a new signer info from a signature address …\nLatest round when the transaction is valid.\nEarliest round when the transaction is valid.\nTransforms <code>CallResult</code> into <code>anyhow::Result&lt;cbor::Value&gt;</code>, …\nPrepare this transaction for signing.\nProxy which has authorized the fees to be paid.\nReturns the public key when the address spec represents a …\nRead-only flag.\nSet amount of fee to pay for transaction execution.\nSet maximum amount of gas that the transaction can use.\nSet a proxy for paying the transaction fee.\nTransaction signer information.\nPerform basic validation on the transaction.\nVerify and deserialize the unverified transaction.\nMaps the caller address to one of the same type but with …")