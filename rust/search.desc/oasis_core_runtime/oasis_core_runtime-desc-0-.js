searchState.loadedDescShard("oasis_core_runtime", 0, "Oasis Core runtime SDK.\nRuntime build information.\nTEE type this build is for.\nRuntime apps.\nIn-memory cache of trees.\nCommon types.\nRuntime configuration.\nConsensus service interfaces.\nRuntime call dispatcher.\nSecure inter-enclave RPC.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nHelper functions to use with the asynchronous Tokio …\nHost interface.\nRuntime attestation key handling.\nDefine a byte array-like type.\nRuntime initialization.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTrue iff the build can provide integrity and …\nDefine a KeyFormat from KeyFormatAtom and a prefix.\nConsensus SGX and quote policy handling.\nRuntime side of the worker-host protocol.\nSupported runtime protocol version.\nRuntime storage interfaces and implementations.\nTEE type this build is for.\nRuntime transaction processing.\nTypes used by the worker-host protocol.\nAn Oasis runtime app.\nAn application which doesn’t do anything.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nWhether this is a ROFL app.\nCreate a new runtime initializer for an application.\nCalled on application initialization.\nCalled on new runtime block being received.\nCalled on new runtime event being detected.\nCalled for runtime queries.\nQuote policy to use for verifying our own enclave identity.\nCached storage tree with an associated root.\nA set of storage tree caches, one for each storage …\nCache used for checking transactions.\nCommits a specific version and root as being stored by the …\nCache used for executing transactions.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new empty cache set.\nCache used for queries.\nReference to the cached tree.\nMutable reference to the cached tree.\nByte array type helpers.\nCryptographic primitives.\nLogging subsystem for runtimes.\nChain namespace.\nPanic-related functions.\nProcess-related helpers.\nAn arbitrary precision unsigned integer.\nSGX-specific functionality.\nRuntime time source.\nProtocol and runtime versioning.\nHash type.\nMRAE primitives.\nSignature types.\nCBOR serializable X25519 types.\nA 32-byte SHA-512/256 hash.\nCompute a digest of the passed slice of bytes.\nCompute a digest of the passed slices of bytes.\nHash of an empty string.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns true if the hash is of an empty string.\nSize of this object in bytes.\nHash truncated to the given number of bytes.\nDeoxys-II-256-128 MRAE primitives implementation.\nNonce utility used to ensure nonces are safely incremented.\nDeoxys-II-256-128 state.\nSize of the Deoxys-II-256-128 key in bytes.\nSize of the nonce in bytes.\nAn abstract Deoxys-II-256-128 box opener.\nSize of the authentication tag in bytes.\nUnboxes (“opens”) the provided additional data and …\nUnboxes (“opens”) the provided additional data and …\nBoxes (“seals”) the provided additional data and …\nReturns the argument unchanged.\nGenerates a public/private key pair suitable for use with …\nCalls <code>U::from(self)</code>.\nCreates a new instance using the provided <code>key</code>.\nDecrypts and authenticates ciphertext, authenticates the …\nLike <code>DeoxysII::open</code> but writes the plaintext into <code>plaintext</code>…\nEncrypts and authenticates plaintext, authenticates the …\nLike <code>DeoxysII::seal</code> but seals into <code>ciphertext_with_tag</code>, …\nSize of the nonce in bytes. Size of the nonce in bytes.\n120 bit nonce with a 88 bit tag and 32 bit counter. If the …\nSize of tag portion of the nonce in bytes. These bytes …\nReturns the argument unchanged.\nGenerate a random nonce.\nAdds one to the nonce, affecting only the last 32 counting …\nCalls <code>U::from(self)</code>.\nCreate a new nonce.\nBlob signed by multiple public keys.\nAn Ed25519 private key.\nAn Ed25519 public key.\nAn Ed25519 signature.\nA signature bundled with a public key.\nBlob signed with one public key.\nA abstract signer.\nSigned blob.\nSigned blob.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstruct a private key from bytes returned by <code>to_bytes</code>.\nGenerate a new private key from a test key seed.\nGenerates a new private key pair.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSize of this object in bytes.\nSize of this object in bytes.\nReturns the public key corresponding to the signer.\nReturns the public key.\nPublic key that produced the signature.\nGenerates a signature over the context and message.\nSignature over the blob.\nActual signature.\nExtends signature context with additional domain …\nExtends signature context with additional domain …\nSignatures over the blob.\nConvert this private key into bytes.\nVerify signature.\nReturns true iff the signature is valid.\nVerify returns true iff the signature is valid over the …\nVerify signature without applying domain separation.\nThe length of an X25519 private key, in bytes.\nThe length of an X25519 public key, in bytes.\nA CBOR serializable Diffie-Hellman X25519 private key.\nA CBOR serializable Diffie-Hellman X25519 public key.\nReturns the argument unchanged.\nLoad private key from a byte array.\nLoad public key from a byte array.\nReturns the argument unchanged.\nGiven an X25519 private key, compute its corresponding …\nGenerate a new private key from a test key seed.\nGenerate a new private key.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCompute corresponding public key.\nA key formatting helper trait to be used together with …\nPart of the KeyFormat to be used with key-value backends …\nDecode the given key format from data.\nDecode the given key format from data (without prefix).\nEncode the given key format.\nEncode the given key format into a set of atoms.\nEncode the first few atoms in the key format.\nThe prefix that identifies the key format.\nThe minimum size of the encoded key.\nGet the logger.\nInitialize the global slog_stdlog adapter to allow logging …\nSize of the namespace in bytes.\nChain namespace.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSize of this object in bytes.\nA guard that will abort the process if dropped while …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAborts the process via <code>std::process::abort</code>, but also …\nAn arbitrary precision unsigned integer.\nDivides two numbers, checking for underflow, overflow and …\nSubtracts two numbers, checking for underflow. If …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nEnclave identity.\nMaximum age of a quote from the viewpoint of the enclave.\nEnclave hash (MRENCLAVE).\nEnclave signer hash (MRSIGNER).\nAn unverified SGX remote attestation quote, depending on …\nQuote validity policy.\nA remote attestation quote that has undergone verification.\nEnclave identity for the current enclave (when available).\nSGX per-CPU package sealing key accessor.\nEnclave identity using a test MRSIGNER from Fortanix with …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nIntel Attestation Service (IAS) attestation verification …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether the quote should be considered fresh.\nSize of this object in bytes.\nSize of this object in bytes.\nIntel Provisioning Certification Services (PCS) quote …\nGenerate a report for the given target enclave.\nWrappers for sealing secrets to the enclave in cold …\nVerify the remote attestation quote.\negetkey returns a 256 bit key suitable for sealing secrets …\nAttestation verification report.\nThe purpose of <code>QuoteContext</code> is to prevent quotes from …\nQuote validity policy.\nAllowed quote statuses.\nWhether IAS quotes are disabled and will always be …\nReturns the argument unchanged.\nReturns the argument unchanged.\nList of blocked platform EPID group IDs.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe minimum TCB evaluation data number that should be …\nVerify attestation report.\nTUD.DEBUG (TD runs in debug mode).\nPossible errors returned by this module.\nSEC.KL (TD is allowed to use Key Locker).\nOTHER.PERFMON (TD is allowed to use Perfmon and …\nSEC.PKS (TD is allowed to use Supervisor Protection Keys).\nAn enclave quote.\nAn attestation quote together with the TCB bundle required …\nQuote validity policy.\nSEC.SEPT_VE_DISABLE (Disable EPT violation conversion to …\nThe TCB bundle contains all the required components to …\nTDX TD attributes.\nTDX TD report.\nTDX module policy.\nTDX-specific quote policy.\nGet a flags value with all known bits set.\nAllowed TDX modules. Empty to allow ANY Intel-signed …\nConverts this report into an enclave identity.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nWhether PCS quotes are disabled and will always be …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nA list of hexadecimal encoded FMSPCs specifying which …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nQuote header.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nWhether the quote with timestamp <code>ts</code> is expired.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nReturns true iff the TDX module in the given report …\nMinimum TCB evaluation data number that is considered to …\nSoftware-defined ID for non-owner-defined configuration of …\nSoftware-defined ID for the TD’s owner.\nSoftware-defined ID for owner-defined configuration of the …\nOptional allowed measurement of the TDX Module. In case it …\nMeasurement of the TDX Module.\nAllowed signer of the TDX Module (zero for Intel).\nSigner of the TDX Module (zero for Intel).\nMeasurement of the initial contents of the TD.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nParse a TDX report.\nParse raw TDX attributes.\nThe intersection of a source flags value with the …\nReport body.\nCustom report data.\nRuntime extendable measurement register 0.\nRuntime extendable measurement register 1.\nRuntime extendable measurement register 2.\nRuntime extendable measurement register 3.\nTDX Module attributes (must be zero for TDX 1.0).\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nValidity (in days) of the TCB collateral.\nTD attributes.\nCompute enclave identity from the given measurements.\nOptional TDX-specific policy. In case this is <code>None</code>, TDX …\nDescribes the TCB of TDX.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nVerify whether the TDX policy is satisfied for the given …\nVerify the quote bundle.\nVerify quote.\nXFAM (eXtended Features Available Mask).\nCreates a new Deoxys-II instance initialized with an SGX …\nSeal a secret to the enclave.\nUnseal a previously sealed secret to the enclave.\nReturns the number of seconds since the UNIX epoch.  The …\nProtocol versions.\nA protocol or runtime version.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if two versions are compatible.\nCreates a new version with given major, minor, and patch …\nVersion key used in serialized form.\nA generic versioned serializable data structure.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new versioned structure.\nGlobal runtime configuration.\nStorage-related configuration.\nThe maximum number of tree nodes held by the cache before …\nThe total size, in bytes, of values held by the cache …\nAdvertised runtime features.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether storage state should be persisted between …\nStorage configuration.\nOptional trust root for consensus layer integrity …\nSemantic runtime version.\nBlockMetadata contains additional metadata related to the …\nAn event emitted by the consensus layer.\nThe height that represents the most recent block height.\nLight consensus block.\nA unique module name for the consensus module.\nConsensus account address structures.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGovernance structures.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRegistry structures.\nConsensus roothash structures.\nScheduler structures.\nConsensus staking structures.\nConsensus state wrappers.\nState root after executing all logic in the block.\nTendermint consensus layer backend.\nTrait for consensus layer verification.\nA staking account address.\nCommon pool reserved address.\nPer-block fee accumulator reserved address.\nGovernance deposits reserved address.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nTries to create a new address from Bech32-encoded string.\nCreates a new address from a public key.\nCreates a new runtime address.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new address from a context, version and data.\nConverts an address to Bech32 representation.\nAn invalid epoch time.\nThe number of intervals (epochs) since a fixed instant in …\nThe epoch state.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAbstained.\nCancel proposal content.\nChange parameters proposal content.\nInvalid vote that should never be explicitly set.\nNo vote.\nConsensus layer governance proposal content.\nVote for a proposal.\nUpgrade proposal content.\nA governance vote.\nYes Vote.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nUnique identifier of a proposal.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nProposal vote.\nPer enclave key manager access control policy.\nEncrypted ephemeral secret.\nEncrypted master secret.\nA secret encrypted with Deoxys-II MRAE algorithm.\nErrors emitted by the key manager module.\nKey manager access control policy.\nSigned encrypted ephemeral secret (RAK).\nSigned encrypted master secret (RAK).\nSigned key manager access control policy.\nChecksum for validating decrypted secret.\nKey manager state in the consensus layer.\nA map of REK encrypted secrets.\nEpoch time in which the secret was created.\nEpoch time to which the ephemeral secret belongs.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGeneration of the secret.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA map of runtime IDs to the vector of enclave IDs that may …\nA vector of enclave IDs that may retrieve the master …\nPublic key to derive the symmetric key for decryption.\nRuntime ID of the key manager.\nRuntime ID of the key manager.\nEncrypted secret.\nEncrypted secret.\nEncrypted master secret.\nEncrypted ephemeral secret.\nSignature of the encrypted master secret.\nSignature of the encrypted ephemeral secret.\nVerify the signatures.\nApplication represents a node’s application to form a …\nErrors emitted by the CHURP module.\nThe NIST P-384 elliptic curve group with the SHA3-384 hash …\nKey manager access control policy.\nSigned key manager access control policy.\nStatus represents the current state of a CHURP instance.\nCipher suite identifier.\nA map of nodes that wish to form the new committee.\nThe hash of the verification matrix from the last …\nThe hash of the random verification matrix.\nA vector of nodes holding a share of the secret in the …\nThe minimum number of shares that can be lost to render …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe epoch of the last successfully completed handoff.\nThe time interval in epochs between handoffs.\nA unique identifier within the key manager runtime.\nA unique identifier within the key manager runtime.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA vector of enclave identities that may form the new …\nA map of runtime identities to the vector of enclave …\nA vector of enclave identities from which a share can be …\nThe hash of the verification matrix from the current …\nThe epoch in which the next handoff will occur.\nA signed SGX access control policy.\nAn SGX access control policy.\nReconstructed is true if and only if the node verified all …\nThe identifier of the key manager runtime.\nThe identifier of the key manager runtime.\nA monotonically increasing policy serial number.\nA vector of signatures.\nThe identifier of a cipher suite used for verifiable …\nThe degree of the secret-sharing polynomial.\nVerify the signatures.\nAttestation signature context.\nAdmission policy that allows any node to register.\nRepresents a node’s capabilities.\nRepresents the node’s TEE capability.\nRepresents a consensus address that includes an ID and a …\nNode’s consensus member information.\nTEE capability endorsement signature context.\nAn endorsed CapabilityTEE structure.\nEntity whitelist configuration.\nA per-role entity whitelist policy.\nA per-entity whitelist configuration for a given role.\nPolicy that allows only whitelisted entities’ nodes to …\nParameters for the executor committee.\nConsensus governance model.\nEntity governance model.\nInvalid model that should never be explicitly set.\nRuntime governance model.\nGeneric compute runtime.\nInvalid runtime that should never be explicitly set.\nKey manager runtime.\nThe latest entity descriptor version that should be used …\nThe method name for freshness proofs.\nA unique module name for the registry module.\nA constraint which specifies that only the given number of …\nA constraint which specifies the minimum required …\nNode registry descriptor.\nRepresents the runtimes supported by a given Oasis node.\nNode’s P2P information.\nA per-role admission policy.\nCompute worker role.\nEmpty roles mask.\nKey manager role.\nObserver role.\nPublic consensus RPC services worker role.\nPublic storage RPC services worker role.\nValidator role.\nOasis node roles bitmask.\nRuntime.\nSpecification of which nodes are allowed to register for a …\nRuntime genesis information that is used to initialize …\nRuntime governance model.\nRuntime kind.\nStake-related parameters for a runtime.\nIntel SGX remote attestation.\nIntel SGX TEE constraints.\nThe node scheduling constraints.\nStorage parameters.\nRepresents the address of a TCP endpoint.\nTEE hardware implementation.\nIntel SGX TEE implementation.\nNon-TEE implementation.\nRepresents an Oasis committee address that includes a TLS …\nNode’s TLS information.\nParameters for the runtime transaction scheduler.\nOld V0 format that only supported IAS policies.\nOld V0 format that only supported IAS quotes.\nNew V1 format that supports both IAS and PCS policies.\nNew V1 format that supports both IAS and PCS policies.\nContains information for this node’s participation in …\nA constraint which specifies that the entity must have a …\nVerified remote attestation.\nA verified endorsed CapabilityTEE structure.\nPer-runtime version information.\nThe currently active deployment for the specified epoch if …\nAddress at which the node can be reached.\nAddress at which the node can be reached.\nList of addresses at which the node can be reached.\nList of addresses at which the node can be reached.\nWhich nodes are allowed to register for this runtime.\nNumber of allowed stragglers.\nAllow any node to register.\nAttestation.\nHow long to wait for a scheduled batch in nanoseconds …\nThe SHA256 hash of the runtime bundle (optional).\nNode’s capabilities for a given runtime.\nTEE capability structure to be endorsed.\nChunk size parameter for checkpoint creation.\nExpected runtime state checkpoint interval (in rounds).\nExpected minimum number of checkpoints to keep.\nInformation for connecting to this node as a consensus …\nNode scheduling constraints.\nWhether the roles mask contains any of the specified roles.\nChecks whether the given enclave identity is whitelisted.\nDeployment corresponding to the specified version if it …\nRuntime deployment information.\nIdentities of allowed enclaves.\nEntity whitelist configuration for each whitelisted entity.\nPublic key identifying the Entity controlling the node.\nPublic key identifying the Entity controlling the runtime.\nAllow only the whitelisted entities’ nodes to register.\nParameters of the executor committee.\nEpoch in which the node’s commitment expires.\nExtra per node + per runtime opaque data associated with …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nRuntime genesis information.\nSearches for an existing supported runtime descriptor in …\nRuntime governance model.\nSize of the discrepancy resolution group.\nSize of the committee.\nHardware type.\nChecks whether the node has any of the specified roles.\nChecks whether the node has the provided TEE identity …\nHashes the required data that needs to be signed by RAK …\nEnclave’s view of the consensus layer height at the time …\nUnique identifier of the node on the P2P transport.\nPublic key identifying the node.\nUnique identifier of the node as a consensus member.\nUnique identifier of the node used to generate VRF proofs.\nPublic key identifying the runtime.\nPublic key identifying the node.\nGlobally unique long term identifier of the runtime.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether the roles mask encodes a single valid role.\nKey manager runtime ID for this runtime.\nType of runtime.\nChecks whether the TEE capability matches the given TEE …\nMaximum size of a scheduled batch.\nMaximum size of a scheduled batch in bytes.\nMaximum size of the incoming message queue.\nMaximum number of liveness failures that are tolerated …\nMaximum number of messages that can be emitted by the …\nMaximum percentage of proposed rounds in an epoch that can …\nMaximum number of nodes that an entity can register under …\nSpecifies the minimum fee that the incoming message must …\nMinimum number of live rounds in an epoch for the liveness …\nMinimum percentage of rounds in an epoch that a node must …\nNode endorsement signature.\nOptional identifier of the node that endorsed the TEE …\nInformation for connecting to this node via P2P.\nA per-role admission policy that must be satisfied in …\nSGX quote policy.\nHow long to wait before accepting proposal from the next …\nPublic key used for establishing TLS connections.\nPublic key used for establishing TLS connections.\nSGX attestation quote.\nVerified enclave quote.\nRuntime attestation key.\nRuntime encryption key.\nThe percentage of the reward obtained when slashing for …\nThe percentage of the reward obtained when slashing for …\nBitmask representing the node roles.\nRuntime round in the genesis.\nRound timeout in consensus blocks.\nNode’s runtimes.\nPer-runtime misbehavior slashing parameters.\nNode’s oasis-node software version.\nRuntime’s staking-related parameters.\nState root that should be used at genesis time. If the …\nParameters of the storage committee.\nIs the capability of a node executing batches in a TEE.\nEnclave version information, in an enclave provided …\nRuntime’s TEE hardware requirements.\nMinimum stake thresholds for a runtime. These per-runtime …\nInformation for connecting to this node via TLS.\nTries to decode the TEE-specific attestation.\nTries to decode the TEE-specific version information.\nTransaction scheduling parameters of the executor …\nStructure version.\nStructure version.\nThe epoch at which this version is valid.\nVerified TEE remote attestation.\nVerifies the TEE capability.\nVerify endorsed TEE capability is valid.\nVerifies the SGX attestation.\nVerify the endorsement signature is valid.\nVersion of the runtime.\nVersion of the runtime.\nInformation for this node’s participation in VRF based …\nThe runtime’s view of the consensus layer height at the …\nAn Intel SGX quote.\nThe signature of the attestation by the enclave (RAK).\nA set of allowed quote statuses.\nThe allowed MRENCLAVE/MRSIGNER pairs.\nThe allowed MRENCLAVE/MRSIGNER pairs.\nThe maximum attestation age (in blocks).\nThe quote policy.\nRuntime block annotated with consensus information.\nRuntime block.\nThe signature context used to sign compute results headers …\nThe header of a computed batch output by a runtime. This …\nThe signature context used to sign executor worker …\nErrors emitted by the roothash module.\nA commitment to results of processing a proposed runtime …\nThe executor commitment failure reason.\nThe header of an executor commitment.\nIndicates that no failure has occurred.\nIndicates that batch processing failed due to the state …\nIndicates a generic failure.\nBlock header.\nHeader type.\nAn incoming message emitted by the consensus layer to be …\nPer-epoch liveness statistics for nodes.\nA message that can be emitted by the runtime to be …\nResult of a message being processed by the consensus layer.\nA trait that validates messages for validity. It can be …\nA trait for looking up registry node descriptors.\nVerified roothash commitment.\nA pool of commitments that can be used to perform …\nInformation about how a particular round was executed by …\nPer-round state and I/O roots that are stored in consensus …\nPer-runtime state.\nVerifies and adds a new executor commitment to the pool.\nPublic keys of compute nodes’ controlling entities that …\nRuntime block.\nAddress of the caller authenticated by the consensus layer.\nCommittee the executor pool is collecting commitments for.\nConsensus height at which this runtime block was produced.\nArbitrary runtime-dependent data.\nReturns a hash of an encoded header.\nReturns a hash of an encoded header.\nThe executor commitment failure reason.\nFee sent into the runtime as part of the message being …\nA list that records the number of finalized rounds when a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nPublic keys of compute nodes’ controlling entities that …\nA list of counters, specified in committee order (e.g. …\nHeader.\nThe compute results header.\nHeader type.\nUnique identifier of the message.\nReturns a hash of provided incoming runtime messages.\nReturns a hash of provided runtime messages.\nThe number of processed incoming messages.\nHash of processed incoming messages.\nThe hash of processed incoming messages.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nI/O merkle root.\nThe I/O merkle root.\nReturns true if this commitment indicates a failure.\nReturns true iff the header is the parent of a child …\nReturns true if the event indicates that the message was …\nRuntime’s most recently finalized block.\nHeight at which the runtime’s most recent block was …\nConsensus block height corresponding to <code>last_normal_round</code>.\nRuntime round which was normally processed by the runtime. …\nLiveness statistics for the current epoch.\nResults of executing emitted runtime messages.\nReturns a hash of provided runtime messages.\nMessages hash.\nHash of messages sent from this batch.\nA list that records the number of failed rounds when a …\nReturns true if the commitment is mostly equal to another …\nChain namespace.\nCreates a new pool.\nCreates a new empty block with a specific type.\nCreates a new empty genesis block given a runtime id and …\nConsensus height at which the round is scheduled for …\nPrevious block hash.\nHash of the previous block header this batch was computed …\nPerforms a single round of commitment checks. If there are …\nRound number.\nRound number.\nLatest per-epoch runtime descriptor.\nSigns the executor commitment header.\nSigns the executor commitment header and sets the …\nState merkle root.\nThe root hash of the state after computing this batch.\nFlag indicating whether the runtime is currently suspended.\nAn optional tag provided by the caller which is ignored …\nTimestamp (POSIX time).\nReturns a commitment-specific result after discrepancy …\nReturns a hash that represents a vote for this commitment …\nTokens sent into the runtime as part of the message being …\nTotal number of rounds in the last epoch, excluding any …\nPerforms basic validation of the runtime message.\nPerforms basic validation of the staking message.\nPerforms basic validation of the registry message.\nPerforms basic validation of the governance message.\nVerifies that the header signature is valid.\nVerifies the RAK signature.\nProtocol version number.\nIndicates the node is a backup worker.\nA per-runtime (instance) committee.\nThe functionality a committee exists to provide.\nA node participating in a committee.\nA compute executor committee.\nAn invalid role (should never appear on the wire).\nAn invalid committee (should never appear on the wire).\nThe role a given node plays in a committee.\nIndicates the node is a worker.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe functionality a committee exists to provide.\nThe committee members.\nThe node’s public key.\nThe node’s role in a committee.\nThe runtime ID that this committee is for.\nReturns the transaction scheduler of the provided …\nThe epoch for which the committee is valid.\nReturns committee nodes with Worker role.\nEntry in the staking ledger.\nEvent emitted when stake is transferred into an escrow …\nAdd escrow result.\nEvent emitted when allowance is changed for a beneficiary.\nEvent emitted when stake is destroyed via a call to Burn.\nCommission rate bound and its starting time.\nCommission rate and its starting time.\nDefines a list of commission rates and commission rate …\nDebonding delegation descriptor.\nEvent emitted when the debonding process has started and …\nDelegation descriptor.\nA stake escrow.\nEscrow account.\nEscrow-related events.\nA staking-related event.\nGeneral purpose account.\nEntity staking threshold.\nCompute node staking threshold.\nKeymanager node staking threshold.\nValidator node staking threshold.\nCompute runtime staking threshold.\nKeymanager runtime staking threshold.\nEvent emitted when stake is reclaimed from an escrow …\nA reclaim escrow.\nReclaim escrow result.\nSlashing due to signing two different executor commits or …\nSlashing due to submission of incorrect results in runtime …\nSlashing due to not doing the required work.\nCombined balance of serval entries, the relative sizes of …\nPer-reason slashing configuration.\nReason for slashing an entity.\nPer escrow account stake accumulator.\nUnique stake claim identifier.\nStake threshold used in the stake accumulator.\nEvent emitted when stake is taken from an escrow account …\nKind of staking threshold.\nA stake transfer.\nEvent emitted when stake is transferred, either by a call …\nTransfer result.\nA withdrawal from an account.\nWithdraw result.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nProvides consensus state tree from the host.\nBeacon state in the consensus layer.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates consensus state using host protocol.\nConsensus layer height that this data is for.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nKey manager state in the consensus layer.\nCreates a consensus state wrapping the provided tree.\nRegistry state in the consensus layer.\nRoothash state in the consensus layer.\nStaking state in the consensus layer.\nConsensus beacon state wrapper.\nMutable consensus beacon state wrapper.\nReturns the current epoch number.\nReturns the current epoch state.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the future epoch number.\nReturns the future epoch state.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstructs a new ImmutableMKVS.\nSet current epoch state.\nSet future epoch state.\nConsensus key manager state wrapper.\nCurrent key manager status.\nKey manager master secret verification checksum.\nKey manager state in the consensus layer.\nLooks up a specific key manager ephemeral secret by its …\nReturns the argument unchanged.\nReturns the argument unchanged.\nGeneration of the latest master secret.\nRuntime ID of the key manager.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTrue iff the key manager is done initializing.\nTrue iff the key manager is secure.\nLooks up a specific key manager master secret by its …\nConstructs a new ImmutableMKVS.\nList of currently active key manager node IDs.\nKey manager policy.\nEpoch of the last master secret rotation.\nRuntime signing key of the key manager.\nLooks up a specific key manager status by its namespace …\nReturns the list of all key manager statuses.\nConsensus CHURP state wrapper.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConstructs a new ImmutableMKVS.\nLooks up a specific key manager status by its namespace …\nConsensus registry state wrapper.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConstructs a new ImmutableMKVS.\nLooks up a specific node by its identifier.\nReturns the list of all registered nodes.\nLooks up a specific runtime by its identifier.\nConsensus roothash state wrapper.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the last round results for a specific runtime.\nConstructs a new ImmutableMKVS.\nReturns the latest runtime state.\nReturns the state root for a specific runtime.\nConsensus staking state wrapper.\nReturns the staking account for the given account address.\nReturns the non-empty addresses from the staking ledger.\nReturns the balance of the global common pool.\nReturns the debonding delegation.\nReturns all debonding delegations.\nReturns the delegation.\nReturns all active delegations.\nReturns the argument unchanged.\nReturns the governance deposits balance.\nCalls <code>U::from(self)</code>.\nReturns the last block fees balance.\nConstructs a new ImmutableMKVS.\nReturns the total supply.\nTendermint consensus backend name. Keep synced with …\nTendermint light consensus block metadata.\nThe domain separation context used by Oasis Core for …\nConvert an Oasis Core chain context into a Tendermint …\nDecode the light block metadata as a Tendermint light …\nEncode the light block metadata to a Tendermint light …\nReturns the argument unchanged.\nState root specified by this light block.\nCalls <code>U::from(self)</code>.\nMerkle proofs used in Tendermint networks\nExtract state root from the given signed block header.\nTendermint consensus layer verification logic.\nMaximum number of aunts that can be included in a Proof. …\nProof represents a Merkle proof.\nCompute the root hash given a leaf hash. Does not verify …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nVerify that the Proof proves the root hash. Check …\nA verifier which performs no verification.\nTendermint consensus layer verifier.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturn a handle to interact with the verifier.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new non-verifying verifier.\nCreate a new Tendermint consensus layer verifier.\nStart the non-verifying verifier.\nStart the verifier in a separate thread.\nConsensus transaction fee the sender wishes to pay for …\nConsensus gas representation.\nMethod name.\nProof of transaction inclusion in a block.\nSigned consensus transaction.\nSigned consensus transaction with a proof of its inclusion …\nUnsigned consensus transaction.\nFee amount to be paid.\nSigned blob.\nMethod call body.\nOptional fee that the sender commits to pay to execute …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nMaximum gas that a transaction can use.\nBlock height at which the transaction was published.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMethod that should be called.\nNonce to prevent replay.\nProof of transaction inclusion in a block.\nActual raw proof.\nSignature over the blob.\nSigned transaction.\nReturns true iff the signature is valid.\nConsensus layer trust root.\nVerifier is the consensus layer state verifier trait.\nKnown consensus chain context.\nReturn the consensus layer events at the given height.\nReturns the argument unchanged.\nReturns the argument unchanged.\nKnown hex-encoded trusted consensus layer header hash.\nKnown trusted height.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn the latest known consensus layer height.\nReturn the latest verified consensus layer state.\nKnown runtime identifier.\nReturn the verified consensus layer state for a given …\nSynchronize the verifier state up to including the passed …\nReturn the consensus layer state accessor for the given …\nVerify that the given runtime header is valid at the given …\nVerify that the given runtime header is valid at the given …\nVerify consensus layer state freshness based on our …\nRuntime call dispatcher.\nInterface for dispatcher initializers.\nState returned by the initializer.\nState available before initialization.\nOptional ROFL application.\nConsensus verifier instance.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nRuntime Attestation Key instance.\nInitializes the dispatcher(s).\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new runtime call dispatcher.\nProtocol instance.\nQueue a new request to be dispatched.\nRPC demultiplexer instance.\nRPC dispatcher instance.\nStart the dispatcher.\nOptional transaction dispatcher that should be used.\nEnclave RPC client.\nRPC call context.\nSession demultiplexer.\nRPC dispatcher.\nSecure channel session.\nSession demultiplexer.\nRPC protocol types.\nAn EnclaveRPC response that can be used to provide peer …\nRPC client.\nRPC client error.\nReport bad peer as peer feedback.\nReport failure as peer feedback.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCall a remote method over an insecure channel where …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsume the response instance returning the inner result.\nReport success if result was <code>Ok(_)</code> and failure if result …\nConstruct an unconnected RPC client with runtime-internal …\nReference to inner result.\nCall a remote method using an encrypted and authenticated …\nReport success as peer feedback.\nUpdate allowed remote enclave identities.\nUpdate remote end’s quote policy.\nUpdate remote runtime id.\nRPC call context.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConstruct new transaction context.\nInformation about the session the RPC call was delivered …\nSession demultiplexer.\nDemultiplexer error.\nCloses the given session.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate new session demultiplexer.\nProcess a frame, returning the locked session guard and …\nResets all open sessions.\nSet the session builder to use.\nRPC call dispatcher.\nRPC handler.\nKey manager quote policy update handler callback.\nKey manager status update handler callback.\nRPC method dispatcher implementation.\nDescriptor of a RPC API method.\nHandler for a RPC method.\nDispatcher for a RPC method.\nRegister a new method in the dispatcher.\nRegister new methods in the dispatcher.\nDispatch request.\nDispatch request.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet method descriptor.\nInvoke the method implementation and return a response.\nHandle key manager quote policy update.\nHandle key manager status update.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSpecifies which kind of RPC is allowed to call the method.\nReturns the list of RPC methods supported by this handler.\nMethod name.\nCreate a new enclave method descriptor.\nUpdate key manager quote policy update handler.\nUpdate key manager status update handler.\nSession builder.\nBinding of the session’s static public key to a remote …\nAn encrypted and authenticated RPC session.\nInformation about a session.\nOld V0 format that only supported IAS quotes.\nNew V1 format that supports both IAS and PCS quotes.\nV2 format which supports endorsed CapabilityTEE structures.\nBuild initiator session.\nBuild responder session.\nMark the session as closed.\nEnable remote node identity verification.\nIdentifier of the node that endorsed the TEE.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturn the local identity if configured in the builder.\nReturn quote policy if configured in the builder.\nReturn remote enclave identities if configured in the …\nReturn remote node identifier.\nReturn remote runtime ID if configured in the builder.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether the session is in closed state.\nWhether the session handshake has completed and the session\nWhether the session is connected to one of the given nodes.\nWhether the session is in unauthenticated transport state. …\nEnable RAK binding.\nProcess incoming data.\nConfigure quote policy used for remote quote verification.\nRAK binding.\nPublic part of the RAK.\nEnable remote enclave identity verification.\nSet remote runtime ID for node identity verification.\nSession information.\nSet the remote node identifier.\nUse endorsement from host node when establishing sessions.\nVerified TEE remote attestation.\nVerify the RAK binding.\nWrite message to session.\nSessions error.\nA multiplexed session.\nKey for use in the by-idle-time index.\nStructure used for session accounting.\nSession indices and management operations.\nShared pointer to a multiplexed session.\nAdd a session if there is an available spot.\nMark the session as closed.\nCreate a new multiplexed initiator session.\nCreate a new multiplexed responder session.\nRemoves and returns all sessions.\nFetch an existing session from one of the given peers. If …\nFetch an existing session from any peer.\nFetch an existing session from one of the given peers.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nFetch an existing session given its identifier.\nReturn the session’s peer ID.\nReturn remote node identifier.\nReturn the session ID.\nSession information.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether the session is in closed state.\nWhether the session handshake has completed and the session\nWhether the session is in unauthenticated transport state. …\nCreate a new session management instance.\nProcess incoming session data.\nRemove a session that must be currently owned by the …\nRemove one session to free up a slot for the given peer.\nRemove one existing session from the given peer if the …\nRemove one stale session if the total number of sessions …\nSet the session builder to use.\nSet the session’s peer ID.\nSet the remote node identifier.\nUpdate remote enclave identity verification in the session …\nUpdate quote policy used for remote quote verification in …\nUpdate remote runtime ID for node identity verification in …\nWrite message to session and generate a response.\nFrame.\nAn insecure RPC call where messages are sent in plain text.\nRPC call kind.\nA local RPC call.\nProtocol message.\nA secure RPC call using an encrypted and authenticated …\nFeedback on the peer that handled the last EnclaveRPC call.\nSession identifier for multiplexing multiple sessions over …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSize of this object in bytes.\nGenerate a random session identifier.\nRuns a future to completion on the current Tokio handle’…\nCreate a new asynchronous Tokio runtime.\nErrors.\nInterface to the (untrusted) host node.\nNotification registration options.\nTransaction submission options.\nTransaction submission result.\nAttestation interface.\nOrder of the transaction in the execution batch.\nBundle manager interface.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the identity of the host node.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLog manager interface.\nTransaction output.\nOptional inclusion proof.\nWhether the response should include a proof of transaction …\nRegister for receiving notifications.\nRound in which the transaction was executed.\nSubscribe to runtime block notifications.\nSubscribe to runtime event notifications.\nTarget runtime identifier. If not specified, own runtime …\nSubmit a transaction.\nVolume manager interface.\nWhether the call should wait until the transaction is …\nSignature context used for label attestation.\nRequest to attest labels.\nResponse from the AttestLabels method.\nAttestaion interface.\nName of the local RPC endpoint for the attestation methods.\nAttestation of component labels.\nName of the AttestLabels method.\nRequest to host to attest component labels.\nCBOR-serialized label attestation.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLabels to attest to.\nAttested label values.\nPublic key of the node attesting to the labels.\nComponent RAK.\nSignature of the attested labels.\nRequest to host to add a specific bundle to the host.\nResponse form the BundleAdd method.\nBundle information.\nRequest to host to list all bundles.\nResponse from host to list all bundles.\nBundle manager interface.\nRequest to host to remove a specific component. Only …\nResponse form the BundleRemove method.\nRequest to host to write a chunk of the bundle to a …\nResponse form the BundleWrite method.\nComponent information.\nName of the special label that identifies the instance.\nName of the local RPC endpoint for the bundle manager.\nName of the BundleAdd method.\nName of the BundleList method.\nName of the BundleRemove method.\nName of the BundleWrite method.\nRequest to host to add a specific bundle to the host.\nRequest to host to list all bundles.\nRequest to host to remove a specific component. Only …\nRequest to host to write a chunk of the bundle to a …\nThe resulting bundles.\nList of all components in this bundle.\nOptional flag which specifies that the temporary file …\nData that should be appended to the temporary file.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLabels to tag the bundle with.\nLabels to filter the components by.\nLabels to filter the components by.\nLabels assigned to this bundle.\nExpected hash of the manifest contained inside the bundle.\nHash of the manifest.\nComponent name.\nTemporary file name to use on the host while writing the …\nTemporary file name to read the bundle from. The file must …\nVolumes to attach to the bundle.\nName of the local RPC endpoint for the log manager.\nRequest to fetch logs.\nResponse from the LogGet method.\nLog manager interface.\nName of the LogGet method.\nIdentifier of the component in the bundle.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLabels to filter the bundles by. All labels must match and …\nRequest to host to fetch logs.\nLog lines for the given component.\nAn optional UNIX timestamp to filter log entries by. Only …\nName of the local RPC endpoint for the volume manager.\nName of the VolumeAdd method.\nName of the VolumeList method.\nName of the VolumeRemove method.\nRequest to add a volume.\nResponse from the VolumeAdd method.\nVolume information.\nResponse from the VolumeList method.\nVolume manager interface.\nRequest to remove volumes.\nResponse from the VolumeRemove method.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nUnique volume identifier.\nUnique volume identifier.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLabels to tag the volume with so it can later be found.\nLabels to filter the volumes by.\nLabels to filter the volumes by.\nLabels assigned to this volume.\nRequest to host to add a volume.\nRequest to host to list volumes.\nRequest to host to remove volumes.\nRuntime identity.\nEndorsed TEE capability.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate an uninitialized runtime identity.\nHost node identity public key.\nPublic part of RAK.\nPublic part of REK.\nQuote for RAK.\nRuntime quote policy.\nChecks whether the RAK matches another specified (RAK_pub, …\nVerify a provided RAK binding.\nStarts the runtime.\nConsensus policy verifier.\nPolicy verifier error.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nFetch runtime’s key manager.\nFetch key manager’s policy from the latest verified …\nFetch key manager’s status from the latest verified …\nCreate a new consensus policy verifier.\nFetch runtime’s quote policy from the latest verified …\nVerify that key manager’s policy has been published in …\nVerify that key manager’s status has been published in …\nVerify that runtime’s quote policy has been published in …\nInformation about the host environment.\nRuntime part of the runtime host protocol.\nUntrusted key/value store which stores arbitrary binary …\nStream used to communicate with the host.\nMake a new request to the runtime host and wait for the …\nMake a new request to the runtime host and wait for the …\nName of the consensus backend that is in use for the …\nConsensus layer chain domain separation context.\nConsensus protocol version that is in use for the …\nEnsure that the runtime is ready to process requests and …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe supplied runtime configuration.\nThe host environment information for this instance.\nThe runtime identity.\nThe runtime identifier for this instance.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nNode-local runtime configuration.\nAssigned runtime identifier of the loaded runtime.\nSend an async response to a previous request back to the …\nTrivial key/value storage.\nUntrusted key/value storage which stores arbitrary binary …\nReturns the argument unchanged.\nFetch the value for a specific key.\nStore a specific key/value into storage.\nCalls <code>U::from(self)</code>.\nMerklized key-value store.\nMerklized key-value store where methods return errors …\nStorage root for transaction IO.\nImmutable merkalized key value store.\nInvalid or uninitialized storage root type.\nAn MKVS iterator.\nAn entry in the write log, describing a single update.\nThe type of entry in the log.\nMerklized key-value store.\nA box type that can contain either internal or leaf nodes.\nA pointer to a node in the tree.\nA reference-counted pointer to a pointer.\nA key-value tree overlay that holds all updates in memory …\nA key prefix.\nStorage root.\nStorage root type.\nStorage root for runtime state.\nA patricia tree-based MKVS implementation.\nThe write log.\nReturn an builder struct to chain configuration calls on.\nCheck if the local MKVS cache contains the given key.\nCheck if the local MKVS cache contains the given key.\nCheck if the key exists in the local cache.\nCommit all database changes to the underlying store.\nCommit all database changes to the underlying store.\nCommit any modifications to the underlying tree.\nCommit tree updates to the underlying database and return …\nCommit any modifications to the underlying tree and then …\nReturn the error that occurred during iteration if any.\nReturn a copy of this pointer containing only hash …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstruct a node pointer from a full node.\nFetch entry with given key.\nFetch entry with given key.\nFetch entry with given key.\nGet an existing key.\nGet an existing key.\nThe key under the iterator.\nGet a reference to the node the pointer is pointing to.\nFetch proof for entry with given key.\nFetch proof for entry with given key.\nFetch proof for entry with given key.\nThe value under the iterator.\nCheck if the pointer has a resolved reference to a …\nMerkle root hash.\nConstruct a hash-only pointer.\nUpdate entry with given key.\nUpdate entry with given key.\nInsert a key/value pair into the tree.\nInsert a key/value pair into the tree.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if the pointer is a null pointer.\nReturn whether the iterator is valid.\nReturns an iterator over the tree.\nReturns an iterator over the tree.\nReturns an iterator over the tree.\nReturn an iterator over the tree.\nReturn an iterator over the tree.\nThe key that was inserted or deleted.\nNamespace under which the root is stored.\nCreate a new overlay tree.\nConstruct a new tree instance using the given read syncer …\nAdvance the iterator to the next key.\nConstruct a null pointer.\nPopulate the in-memory tree with nodes for keys starting …\nPopulate the in-memory tree with nodes for keys starting …\nPopulate the in-memory tree with nodes for keys starting …\nPopulate the in-memory tree with nodes for keys starting …\nRemove entry with given key, returning the value at the …\nRemove entry with given key, returning the value at the …\nRemove entry with given key, returning the value at the …\nRemove entry with given key, returning the value at the …\nMoves the iterator to the first key in the tree.\nThe storage type that this root has data for.\nMoves the iterator either at the given key or at the next …\nSets the number of next elements to prefetch.\nThe read-only tree sync interface.\nThe inserted value (empty if the key was deleted).\nMonotonically increasing version number in which the root …\nThe <code>Marshal</code> trait is used for marshaling and unmarshaling …\nMarshal the object into a binary form and return it as a …\nUnmarshal from the given byte slice reference and modify …\nRequest for the SyncGetPrefixes operation.\nRequest for the SyncGet operation.\nA proxy read syncer which forwards calls to the runtime …\nRequest for the SyncIterate operation.\nA no-op read syncer which doesn’t support any of the …\nA Merkle proof for a subtree.\nA Merkle proof builder.\nResponse for requests that produce proofs.\nA proof verifier enables verifying proofs returned by the …\nA raw proof entry.\nReadSync is the interface for synchronizing the in-memory …\nA proxy read syncer which keeps track of call statistics.\nIdentifies a specific tree and a position within that tree.\nReturn <code>self</code> as an <code>Any</code> object, useful for downcasting.\nBuild the (unverified) proof.\nProof entries in pre-order traversal.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAdd a node to the set of included nodes.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMerges a previously verified subtree with an existing tree.\nConstruct a new host proxy instance.\nCreate a new proof builder for the given root hash.\nConstruct a new instance, proxying to the given backing …\nCreate a new proof builder for the given root hash and …\nThe caller’s position in the tree structure to allow …\nThe Merkle tree root.\nFetch a single key and returns the corresponding proof.\nCount of <code>sync_get</code> calls made to the underlying read syncer.\nFetch all keys under the given prefixes and returns the …\nCount of <code>sync_get_prefixes</code> calls made to the underlying …\nSeek to a given key and then fetch the specified number of …\nCount of <code>sync_iterate</code> calls made to the underlying read …\nThe root hash this proof is for. This should only be used …\nVerify a proof and generate an in-memory subtree …\nRuntime call context.\nRuntime transaction batch dispatcher.\nRead/write set.\nTransaction tags.\nTransaction I/O tree.\nTransaction protocol types.\nTransaction context.\nFlag indicating whether to only perform transaction check …\nConsensus light block.\nConsensus state tree.\nEpoch corresponding to the currently processed block.\nReturns the argument unchanged.\nThe block header accompanying this transaction.\nCalls <code>U::from(self)</code>.\nThe maximum number of messages that can be emitted in this …\nConstruct new transaction context.\nLow-level access to the underlying Runtime Host Protocol.\nResults of processing the previous successful round.\nRuntime state.\nRuntime transaction dispatcher trait.\nResult of processing a batch of ExecuteTx.\nResult of processing an ExecuteTx.\nNo-op dispatcher.\nBlock emitted tags (not emitted by a specific transaction).\nCheck the transactions in the given batch for validity.\nExecute the transactions in the given batch.\nInvoke the finalizer (if any).\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nNumber of processed incoming messages.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether dispatch is supported by this dispatcher.\nEmitted runtime messages.\nTransaction output.\nProcess a query.\nPer-transaction execution results.\nSchedule and execute transactions in the given batch.\nConfigure abort batch flag.\nEmitted tags.\nHashes of transactions to reject.\nA coarsened key prefix that represents any key that starts …\nA set of coarsened keys.\nA read/write set.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSize of the key prefixes (in bytes) used for coarsening …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe read set.\nThe write set.\nTag is a key/value pair of arbitrary byte blobs with …\nA set of tags.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe tag key.\nCreate a new tag.\nThe hash of the transaction that emitted the tag.\nThe tag value.\nHash used for block emitted tags not tied to a specific …\nA Merkle tree containing transaction artifacts.\nAdd block tags.\nAdd an input transaction artifact.\nAdd an output transaction artifact.\nCommit updates to the underlying Merkle tree and return …\nReturns the argument unchanged.\nFetch the input artifact for the given transaction hash.\nFetch the output artifact for the given transaction hash.\nCalls <code>U::from(self)</code>.\nCreate a new transaction artifacts tree.\nBatch of transaction inputs/outputs.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRuntime host protocol message body.\nCheckTx transaction metadata.\nResult of a CheckTx operation.\nComputed batch.\nA serializable error.\nConsensus event kind.\nExecution mode where the batch of transactions is executed …\nBatch execution mode.\nA feature specifying that the runtime supports controlling …\nSet of supported runtime features.\nRequest to host to fetch the consensus events for the …\nResponse from host fetching the consensus events for the …\nHost storage endpoint.\nInvalid message (should never be seen on the wire).\nRuntime protocol message.\nRegistration for runtime event notifications.\nRequest.\nResponse.\nRuntime information request.\nRuntime information response.\nAn event notification.\nExecution mode where the runtime is in control of …\nStorage sync request.\nStorage sync response.\nHeader of the block that emitted the event.\nMessage body.\nA feature specifying that the runtime supports endorsed …\nDescribes the features supported by the runtime.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCompute results header.\nUnique request identifier.\nSize of the initial batch of transactions.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLog that generates the I/O tree.\nA feature specifying that the runtime supports updating …\nA feature specifying that the runtime supports updating …\nMessage type.\nMessages emitted by the runtime.\nCreate a new error.\nThe runtime protocol version supported by the runtime.\nIf this runtime uses a TEE, then this is the signature of …\nThe version of the runtime.\nSchedule control feature.\nLog of changes to the state tree.\nEvent tags to subscribe to.\nMatching tags.")